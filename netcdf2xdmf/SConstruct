#!/usr/bin/python
##
# @file
# This file is part of SeisSol.
#
# @author Sebastian Rettenberger (sebastian.rettenberger AT tum.de, http://www5.in.tum.de/wiki/index.php/Sebastian_Rettenberger)
#
# @section LICENSE
# Copyright (c) 2016-2017, SeisSol Group
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
#

import os
import libs
import utils.variables

vars = utils.variables.Variables()

# Add prefix path variable and compiler option
vars.AddPrefixPathVariable()
vars.AddCompilerVariable()

env = Environment(variables=vars)
env['ENV'] = os.environ
env['CC'] = os.environ.get('CC', env['CC'])
env['CXX'] = os.environ.get('CXX', env['CXX'])
env['CXXFLAGS'] = '-std=c++11'

# Generate help
vars.SetHelpText(env)

# Set prefix pathes and compiler from user
vars.SetPrefixPathes(env)
vars.SetCompiler(env)

# Add netCDF
libs.find(env, 'netcdf')
hasAsagi = libs.find(env, 'asagi', required=False, parallel=False)
if hasAsagi:
    env.Append(CPPDEFINES=['USE_ASAGI'])

env.Tool('cmake')

# yaml-cpp
yaml_cpp = env.CMake(source=[
    Glob(path + '*/.cpp')
    for path, dirs, files in os.walk('submodules/yaml-cpp/src')
],
                     target=['#/build/external/yaml-cpp/libyaml-cpp.a'],
                     CMakeProject=Dir('submodules/yaml-cpp'),
                     CMakeOpts=[
                         '-DYAML_CPP_BUILD_TOOLS=no',
                         '-DCMAKE_CXX_COMPILER=' + env['CXX']
                     ])
env.Append(CPPPATH=['#/submodules/yaml-cpp/include'])
env.Append(LIBS=yaml_cpp)

# impalajit
impalajit = env.CMake(source=[
    Glob(path + '*/.cc')
    for path, dirs, files in os.walk('submodules/ImpalaJIT')
],
                      target=['submodules/ImpalaJIT/lib/libimpalajit.a'],
                      CMakeProject=Dir('submodules/ImpalaJIT'),
                      CMakeBuildDir=Dir('#/build/external/impalajit/'),
                      CMakeOpts=['-DCMAKE_CXX_COMPILER=' + env['CXX']])
env.Append(CPPPATH=['#/submodules/ImpalaJIT/include'])
env.Append(LIBS=impalajit)

# Add include path
env.Append(CPPPATH=[
    '#/src', '#/submodules/yaml-cpp/include', '#/submodules/easi/include'
])
env.Append(LIBS=yaml_cpp)

buildDir = 'build'

env.sourceFiles = []

Export('env')
SConscript('src/SConscript',
           variant_dir='#/build/' + buildDir,
           src_dir='#/',
           duplicate=0)
Import('env')

nc2xdmf = env.Program('#/build/netcdf2xdmf', env.sourceFiles)
env.Depends(nc2xdmf, yaml_cpp)
env.Depends(nc2xdmf, impalajit)
